
aditya.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a70  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c04  08003c04  00004c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c1c  08003c1c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c24  08003c24  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c24  08003c24  00004c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c28  08003c28  00004c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  2000000c  08003c38  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08003c38  000054ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbec  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2f  00000000  00000000  00011c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00013958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f0  00000000  00000000  00014638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001727a  00000000  00000000  00015028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbe8  00000000  00000000  0002c2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009485c  00000000  00000000  0003be8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d06e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003618  00000000  00000000  000d072c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d3d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003bec 	.word	0x08003bec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003bec 	.word	0x08003bec

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fd64 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f814 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fa06 	bl	80008e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d4:	f000 f87c 	bl	80005d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004d8:	f000 f8cc 	bl	8000674 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004dc:	f000 f8f8 	bl	80006d0 <MX_I2C2_Init>
  MX_I2C3_Init();
 80004e0:	f000 f924 	bl	800072c <MX_I2C3_Init>
  MX_SDIO_MMC_Init();
 80004e4:	f000 f96a 	bl	80007bc <MX_SDIO_MMC_Init>
  MX_SPI3_Init();
 80004e8:	f000 f9c4 	bl	8000874 <MX_SPI3_Init>
  MX_IWDG_Init();
 80004ec:	f000 f94c 	bl	8000788 <MX_IWDG_Init>
  MX_SPI2_Init();
 80004f0:	f000 f98a 	bl	8000808 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <main+0x30>

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	@ 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	@ 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f003 fb44 	bl	8003b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <SystemClock_Config+0xd0>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000524:	4a28      	ldr	r2, [pc, #160]	@ (80005c8 <SystemClock_Config+0xd0>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	@ 0x40
 800052c:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <SystemClock_Config+0xd0>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b23      	ldr	r3, [pc, #140]	@ (80005cc <SystemClock_Config+0xd4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000544:	4a21      	ldr	r2, [pc, #132]	@ (80005cc <SystemClock_Config+0xd4>)
 8000546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <SystemClock_Config+0xd4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000558:	230a      	movs	r3, #10
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2310      	movs	r3, #16
 8000562:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2300      	movs	r3, #0
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000570:	2310      	movs	r3, #16
 8000572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000574:	23c0      	movs	r3, #192	@ 0xc0
 8000576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800057c:	2304      	movs	r3, #4
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	4618      	mov	r0, r3
 8000586:	f002 fa85 	bl	8002a94 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000590:	f000 fa00 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fce8 	bl	8002f84 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ba:	f000 f9eb 	bl	8000994 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	@ 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005e2:	4b22      	ldr	r3, [pc, #136]	@ (800066c <MX_ADC1_Init+0x9c>)
 80005e4:	4a22      	ldr	r2, [pc, #136]	@ (8000670 <MX_ADC1_Init+0xa0>)
 80005e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005e8:	4b20      	ldr	r3, [pc, #128]	@ (800066c <MX_ADC1_Init+0x9c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ee:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <MX_ADC1_Init+0x9c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <MX_ADC1_Init+0x9c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005fa:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <MX_ADC1_Init+0x9c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000600:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_ADC1_Init+0x9c>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <MX_ADC1_Init+0x9c>)
 800060a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800060e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_Ext_IT11;
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_ADC1_Init+0x9c>)
 8000612:	f04f 6270 	mov.w	r2, #251658240	@ 0xf000000
 8000616:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <MX_ADC1_Init+0x9c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <MX_ADC1_Init+0x9c>)
 8000620:	2201      	movs	r2, #1
 8000622:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000624:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_ADC1_Init+0x9c>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <MX_ADC1_Init+0x9c>)
 800062e:	2201      	movs	r2, #1
 8000630:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000632:	480e      	ldr	r0, [pc, #56]	@ (800066c <MX_ADC1_Init+0x9c>)
 8000634:	f000 fd44 	bl	80010c0 <HAL_ADC_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800063e:	f000 f9a9 	bl	8000994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	4619      	mov	r1, r3
 8000652:	4806      	ldr	r0, [pc, #24]	@ (800066c <MX_ADC1_Init+0x9c>)
 8000654:	f000 fd78 	bl	8001148 <HAL_ADC_ConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800065e:	f000 f999 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000028 	.word	0x20000028
 8000670:	40012000 	.word	0x40012000

08000674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <MX_I2C1_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000680:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x58>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000692:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006b2:	f001 f9d1 	bl	8001a58 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 f96a 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000070 	.word	0x20000070
 80006c8:	40005400 	.word	0x40005400
 80006cc:	000186a0 	.word	0x000186a0

080006d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2C2_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <MX_I2C2_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_I2C2_Init+0x50>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <MX_I2C2_Init+0x58>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_I2C2_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_I2C2_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_I2C2_Init+0x50>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_I2C2_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_I2C2_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_I2C2_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_I2C2_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_I2C2_Init+0x50>)
 800070e:	f001 f9a3 	bl	8001a58 <HAL_I2C_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f93c 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000c4 	.word	0x200000c4
 8000724:	40005800 	.word	0x40005800
 8000728:	000186a0 	.word	0x000186a0

0800072c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_I2C3_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <MX_I2C3_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_I2C3_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <MX_I2C3_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_I2C3_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_I2C3_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_I2C3_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_I2C3_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_I2C3_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_I2C3_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_I2C3_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_I2C3_Init+0x50>)
 800076a:	f001 f975 	bl	8001a58 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f90e 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000118 	.word	0x20000118
 8000780:	40005c00 	.word	0x40005c00
 8000784:	000186a0 	.word	0x000186a0

08000788 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_IWDG_Init+0x2c>)
 800078e:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <MX_IWDG_Init+0x30>)
 8000790:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_IWDG_Init+0x2c>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_IWDG_Init+0x2c>)
 800079a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800079e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_IWDG_Init+0x2c>)
 80007a2:	f001 fa9d 	bl	8001ce0 <HAL_IWDG_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80007ac:	f000 f8f2 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000016c 	.word	0x2000016c
 80007b8:	40003000 	.word	0x40003000

080007bc <MX_SDIO_MMC_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_MMC_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hmmc.Instance = SDIO;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_SDIO_MMC_Init+0x44>)
 80007c2:	4a10      	ldr	r2, [pc, #64]	@ (8000804 <MX_SDIO_MMC_Init+0x48>)
 80007c4:	601a      	str	r2, [r3, #0]
  hmmc.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_SDIO_MMC_Init+0x44>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hmmc.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_SDIO_MMC_Init+0x44>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hmmc.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_SDIO_MMC_Init+0x44>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hmmc.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_SDIO_MMC_Init+0x44>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hmmc.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_SDIO_MMC_Init+0x44>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hmmc.Init.ClockDiv = 0;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_SDIO_MMC_Init+0x44>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_SDIO_MMC_Init+0x44>)
 80007ec:	f001 faba 	bl	8001d64 <HAL_MMC_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_SDIO_MMC_Init+0x3e>
  {
    Error_Handler();
 80007f6:	f000 f8cd 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000178 	.word	0x20000178
 8000804:	40012c00 	.word	0x40012c00

08000808 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800080c:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_SPI2_Init+0x64>)
 800080e:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <MX_SPI2_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_SPI2_Init+0x64>)
 8000814:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_SPI2_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_SPI2_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_SPI2_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_SPI2_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_SPI2_Init+0x64>)
 8000834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000838:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_SPI2_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000840:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <MX_SPI2_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_SPI2_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <MX_SPI2_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_SPI2_Init+0x64>)
 8000854:	220a      	movs	r2, #10
 8000856:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <MX_SPI2_Init+0x64>)
 800085a:	f002 fd5f 	bl	800331c <HAL_SPI_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 f896 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200003f8 	.word	0x200003f8
 8000870:	40003800 	.word	0x40003800

08000874 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_SPI3_Init+0x64>)
 800087a:	4a18      	ldr	r2, [pc, #96]	@ (80008dc <MX_SPI3_Init+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_SPI3_Init+0x64>)
 8000880:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000884:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_SPI3_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_SPI3_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_SPI3_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_SPI3_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008c0:	220a      	movs	r2, #10
 80008c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008c6:	f002 fd29 	bl	800331c <HAL_SPI_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008d0:	f000 f860 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000450 	.word	0x20000450
 80008dc:	40003c00 	.word	0x40003c00

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b24      	ldr	r3, [pc, #144]	@ (800098c <MX_GPIO_Init+0xac>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a23      	ldr	r2, [pc, #140]	@ (800098c <MX_GPIO_Init+0xac>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b21      	ldr	r3, [pc, #132]	@ (800098c <MX_GPIO_Init+0xac>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b1d      	ldr	r3, [pc, #116]	@ (800098c <MX_GPIO_Init+0xac>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a1c      	ldr	r2, [pc, #112]	@ (800098c <MX_GPIO_Init+0xac>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_GPIO_Init+0xac>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <MX_GPIO_Init+0xac>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a15      	ldr	r2, [pc, #84]	@ (800098c <MX_GPIO_Init+0xac>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <MX_GPIO_Init+0xac>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_GPIO_Init+0xac>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a0e      	ldr	r2, [pc, #56]	@ (800098c <MX_GPIO_Init+0xac>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_GPIO_Init+0xac>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC15 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11;
 8000966:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_GPIO_Init+0xb0>)
 800097e:	f000 fee7 	bl	8001750 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	@ 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40020800 	.word	0x40020800

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <Error_Handler+0x8>

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	4a0f      	ldr	r2, [pc, #60]	@ (80009ec <HAL_MspInit+0x4c>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <HAL_MspInit+0x4c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	@ 0x30
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a31      	ldr	r2, [pc, #196]	@ (8000ad4 <HAL_ADC_MspInit+0xe4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d15b      	bne.n	8000aca <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a28      	ldr	r2, [pc, #160]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a21      	ldr	r2, [pc, #132]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <HAL_ADC_MspInit+0xe8>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a82:	233f      	movs	r3, #63	@ 0x3f
 8000a84:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4811      	ldr	r0, [pc, #68]	@ (8000adc <HAL_ADC_MspInit+0xec>)
 8000a96:	f000 fe5b 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a9a:	23ff      	movs	r3, #255	@ 0xff
 8000a9c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <HAL_ADC_MspInit+0xf0>)
 8000aae:	f000 fe4f 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4807      	ldr	r0, [pc, #28]	@ (8000ae4 <HAL_ADC_MspInit+0xf4>)
 8000ac6:	f000 fe43 	bl	8001750 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000aca:	bf00      	nop
 8000acc:	3730      	adds	r7, #48	@ 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40012000 	.word	0x40012000
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	@ 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a63      	ldr	r2, [pc, #396]	@ (8000c94 <HAL_I2C_MspInit+0x1ac>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12c      	bne.n	8000b64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
 8000b0e:	4b62      	ldr	r3, [pc, #392]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a61      	ldr	r2, [pc, #388]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
 8000b24:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b26:	23c0      	movs	r3, #192	@ 0xc0
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2a:	2312      	movs	r3, #18
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b36:	2304      	movs	r3, #4
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4856      	ldr	r0, [pc, #344]	@ (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000b42:	f000 fe05 	bl	8001750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	4b53      	ldr	r3, [pc, #332]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	4a52      	ldr	r2, [pc, #328]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000b50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b56:	4b50      	ldr	r3, [pc, #320]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b62:	e093      	b.n	8000c8c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a4d      	ldr	r2, [pc, #308]	@ (8000ca0 <HAL_I2C_MspInit+0x1b8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d13d      	bne.n	8000bea <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	4b49      	ldr	r3, [pc, #292]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a48      	ldr	r2, [pc, #288]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b46      	ldr	r3, [pc, #280]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b90:	2312      	movs	r3, #18
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	483d      	ldr	r0, [pc, #244]	@ (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000ba8:	f000 fdd2 	bl	8001750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bac:	2308      	movs	r3, #8
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb0:	2312      	movs	r3, #18
 8000bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000bbc:	2309      	movs	r3, #9
 8000bbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4835      	ldr	r0, [pc, #212]	@ (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000bc8:	f000 fdc2 	bl	8001750 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd4:	4a30      	ldr	r2, [pc, #192]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000bd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
}
 8000be8:	e050      	b.n	8000c8c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca4 <HAL_I2C_MspInit+0x1bc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d14b      	bne.n	8000c8c <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	4a26      	ldr	r2, [pc, #152]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c04:	4b24      	ldr	r3, [pc, #144]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c18:	4a1f      	ldr	r2, [pc, #124]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c32:	2312      	movs	r3, #18
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4817      	ldr	r0, [pc, #92]	@ (8000ca8 <HAL_I2C_MspInit+0x1c0>)
 8000c4a:	f000 fd81 	bl	8001750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c54:	2312      	movs	r3, #18
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c60:	2304      	movs	r3, #4
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4810      	ldr	r0, [pc, #64]	@ (8000cac <HAL_I2C_MspInit+0x1c4>)
 8000c6c:	f000 fd70 	bl	8001750 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c78:	4a07      	ldr	r2, [pc, #28]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000c7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	3738      	adds	r7, #56	@ 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40005400 	.word	0x40005400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	40005800 	.word	0x40005800
 8000ca4:	40005c00 	.word	0x40005c00
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDIO)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a28      	ldr	r2, [pc, #160]	@ (8000d70 <HAL_MMC_MspInit+0xc0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d14a      	bne.n	8000d68 <HAL_MMC_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b27      	ldr	r3, [pc, #156]	@ (8000d74 <HAL_MMC_MspInit+0xc4>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cda:	4a26      	ldr	r2, [pc, #152]	@ (8000d74 <HAL_MMC_MspInit+0xc4>)
 8000cdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce2:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <HAL_MMC_MspInit+0xc4>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <HAL_MMC_MspInit+0xc4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d74 <HAL_MMC_MspInit+0xc4>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <HAL_MMC_MspInit+0xc4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_MMC_MspInit+0xc4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a18      	ldr	r2, [pc, #96]	@ (8000d74 <HAL_MMC_MspInit+0xc4>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <HAL_MMC_MspInit+0xc4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000d26:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d38:	230c      	movs	r3, #12
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	480d      	ldr	r0, [pc, #52]	@ (8000d78 <HAL_MMC_MspInit+0xc8>)
 8000d44:	f000 fd04 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d58:	230c      	movs	r3, #12
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <HAL_MMC_MspInit+0xcc>)
 8000d64:	f000 fcf4 	bl	8001750 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	@ 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40012c00 	.word	0x40012c00
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	@ 0x30
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a42      	ldr	r2, [pc, #264]	@ (8000ea8 <HAL_SPI_MspInit+0x128>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12d      	bne.n	8000dfe <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	4b41      	ldr	r3, [pc, #260]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	4a40      	ldr	r2, [pc, #256]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db2:	4b3e      	ldr	r3, [pc, #248]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dba:	61bb      	str	r3, [r7, #24]
 8000dbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a39      	ldr	r2, [pc, #228]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b37      	ldr	r3, [pc, #220]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dda:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dec:	2305      	movs	r3, #5
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	482e      	ldr	r0, [pc, #184]	@ (8000eb0 <HAL_SPI_MspInit+0x130>)
 8000df8:	f000 fcaa 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dfc:	e04f      	b.n	8000e9e <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb4 <HAL_SPI_MspInit+0x134>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d14a      	bne.n	8000e9e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e10:	4a26      	ldr	r2, [pc, #152]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e18:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e48:	4a18      	ldr	r2, [pc, #96]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e50:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <HAL_SPI_MspInit+0x12c>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e6e:	2306      	movs	r3, #6
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	480f      	ldr	r0, [pc, #60]	@ (8000eb8 <HAL_SPI_MspInit+0x138>)
 8000e7a:	f000 fc69 	bl	8001750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e7e:	2330      	movs	r3, #48	@ 0x30
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e8e:	2306      	movs	r3, #6
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <HAL_SPI_MspInit+0x130>)
 8000e9a:	f000 fc59 	bl	8001750 <HAL_GPIO_Init>
}
 8000e9e:	bf00      	nop
 8000ea0:	3730      	adds	r7, #48	@ 0x30
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40003800 	.word	0x40003800
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	40003c00 	.word	0x40003c00
 8000eb8:	40020800 	.word	0x40020800

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f12:	f000 f891 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f44:	f7ff ffea 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	@ (8000f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	@ (8000f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f002 fe19 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff faa7 	bl	80004c4 <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f84:	08003c2c 	.word	0x08003c2c
  ldr r2, =_sbss
 8000f88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f8c:	200004ac 	.word	0x200004ac

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	@ (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 fb93 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f000 f808 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fcea 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fb9d 	bl	8001736 <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f000 fb73 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	@ (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000000 	.word	0x20000000
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	@ (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	200004a8 	.word	0x200004a8

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	@ (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200004a8 	.word	0x200004a8

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffde 	bl	8001060 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008

080010c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e033      	b.n	800113e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fc86 	bl	80009f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d118      	bne.n	8001130 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001106:	f023 0302 	bic.w	r3, r3, #2
 800110a:	f043 0202 	orr.w	r2, r3, #2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f93a 	bl	800138c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	f023 0303 	bic.w	r3, r3, #3
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	@ 0x40
 800112e:	e001      	b.n	8001134 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x1c>
 8001160:	2302      	movs	r3, #2
 8001162:	e105      	b.n	8001370 <HAL_ADC_ConfigChannel+0x228>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b09      	cmp	r3, #9
 8001172:	d925      	bls.n	80011c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68d9      	ldr	r1, [r3, #12]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	3b1e      	subs	r3, #30
 800118a:	2207      	movs	r2, #7
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43da      	mvns	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	400a      	ands	r2, r1
 8001198:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68d9      	ldr	r1, [r3, #12]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	4603      	mov	r3, r0
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4403      	add	r3, r0
 80011b2:	3b1e      	subs	r3, #30
 80011b4:	409a      	lsls	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	e022      	b.n	8001206 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6919      	ldr	r1, [r3, #16]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	2207      	movs	r2, #7
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	400a      	ands	r2, r1
 80011e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6919      	ldr	r1, [r3, #16]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	4603      	mov	r3, r0
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4403      	add	r3, r0
 80011fc:	409a      	lsls	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b06      	cmp	r3, #6
 800120c:	d824      	bhi.n	8001258 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	3b05      	subs	r3, #5
 8001220:	221f      	movs	r2, #31
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	400a      	ands	r2, r1
 800122e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	3b05      	subs	r3, #5
 800124a:	fa00 f203 	lsl.w	r2, r0, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	635a      	str	r2, [r3, #52]	@ 0x34
 8001256:	e04c      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b0c      	cmp	r3, #12
 800125e:	d824      	bhi.n	80012aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	3b23      	subs	r3, #35	@ 0x23
 8001272:	221f      	movs	r2, #31
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43da      	mvns	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	400a      	ands	r2, r1
 8001280:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3b23      	subs	r3, #35	@ 0x23
 800129c:	fa00 f203 	lsl.w	r2, r0, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80012a8:	e023      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	3b41      	subs	r3, #65	@ 0x41
 80012bc:	221f      	movs	r2, #31
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	400a      	ands	r2, r1
 80012ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3b41      	subs	r3, #65	@ 0x41
 80012e6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f2:	4b22      	ldr	r3, [pc, #136]	@ (800137c <HAL_ADC_ConfigChannel+0x234>)
 80012f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a21      	ldr	r2, [pc, #132]	@ (8001380 <HAL_ADC_ConfigChannel+0x238>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d109      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1cc>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b12      	cmp	r3, #18
 8001306:	d105      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	@ (8001380 <HAL_ADC_ConfigChannel+0x238>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d123      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x21e>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b10      	cmp	r3, #16
 8001324:	d003      	beq.n	800132e <HAL_ADC_ConfigChannel+0x1e6>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b11      	cmp	r3, #17
 800132c:	d11b      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b10      	cmp	r3, #16
 8001340:	d111      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <HAL_ADC_ConfigChannel+0x23c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a10      	ldr	r2, [pc, #64]	@ (8001388 <HAL_ADC_ConfigChannel+0x240>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	0c9a      	lsrs	r2, r3, #18
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001358:	e002      	b.n	8001360 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3b01      	subs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f9      	bne.n	800135a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40012300 	.word	0x40012300
 8001380:	40012000 	.word	0x40012000
 8001384:	20000000 	.word	0x20000000
 8001388:	431bde83 	.word	0x431bde83

0800138c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001394:	4b79      	ldr	r3, [pc, #484]	@ (800157c <ADC_Init+0x1f0>)
 8001396:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6859      	ldr	r1, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	021a      	lsls	r2, r3, #8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6899      	ldr	r1, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141e:	4a58      	ldr	r2, [pc, #352]	@ (8001580 <ADC_Init+0x1f4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d022      	beq.n	800146a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001432:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6899      	ldr	r1, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6899      	ldr	r1, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	e00f      	b.n	800148a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001488:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0202 	bic.w	r2, r2, #2
 8001498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6899      	ldr	r1, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7e1b      	ldrb	r3, [r3, #24]
 80014a4:	005a      	lsls	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d01b      	beq.n	80014f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e2:	3b01      	subs	r3, #1
 80014e4:	035a      	lsls	r2, r3, #13
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	e007      	b.n	8001500 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800150e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	3b01      	subs	r3, #1
 800151c:	051a      	lsls	r2, r3, #20
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6899      	ldr	r1, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001542:	025a      	lsls	r2, r3, #9
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800155a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6899      	ldr	r1, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	029a      	lsls	r2, r3, #10
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	609a      	str	r2, [r3, #8]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40012300 	.word	0x40012300
 8001580:	0f000001 	.word	0x0f000001

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	@ (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	@ (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	@ 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff47 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff5c 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff8e 	bl	800163c <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffb0 	bl	80016a4 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e159      	b.n	8001a20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 8148 	bne.w	8001a1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d005      	beq.n	80017a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d130      	bne.n	8001804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d017      	beq.n	8001840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a2 	beq.w	8001a1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b57      	ldr	r3, [pc, #348]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	4a56      	ldr	r2, [pc, #344]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e6:	4b54      	ldr	r3, [pc, #336]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f2:	4a52      	ldr	r2, [pc, #328]	@ (8001a3c <HAL_GPIO_Init+0x2ec>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a49      	ldr	r2, [pc, #292]	@ (8001a40 <HAL_GPIO_Init+0x2f0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d019      	beq.n	8001952 <HAL_GPIO_Init+0x202>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a48      	ldr	r2, [pc, #288]	@ (8001a44 <HAL_GPIO_Init+0x2f4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x1fe>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a47      	ldr	r2, [pc, #284]	@ (8001a48 <HAL_GPIO_Init+0x2f8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x1fa>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a46      	ldr	r2, [pc, #280]	@ (8001a4c <HAL_GPIO_Init+0x2fc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x1f6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a45      	ldr	r2, [pc, #276]	@ (8001a50 <HAL_GPIO_Init+0x300>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x1f2>
 800193e:	2304      	movs	r3, #4
 8001940:	e008      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001942:	2307      	movs	r3, #7
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001946:	2303      	movs	r3, #3
 8001948:	e004      	b.n	8001954 <HAL_GPIO_Init+0x204>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <HAL_GPIO_Init+0x204>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001952:	2300      	movs	r3, #0
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f002 0203 	and.w	r2, r2, #3
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	4093      	lsls	r3, r2
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001964:	4935      	ldr	r1, [pc, #212]	@ (8001a3c <HAL_GPIO_Init+0x2ec>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001972:	4b38      	ldr	r3, [pc, #224]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001996:	4a2f      	ldr	r2, [pc, #188]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800199c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c0:	4a24      	ldr	r2, [pc, #144]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c6:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f0:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a14:	4a0f      	ldr	r2, [pc, #60]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	f67f aea2 	bls.w	800176c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e12b      	b.n	8001cc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d106      	bne.n	8001a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff f832 	bl	8000ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2224      	movs	r2, #36	@ 0x24
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001aaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001aba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001abc:	f001 fc1a 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8001ac0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4a81      	ldr	r2, [pc, #516]	@ (8001ccc <HAL_I2C_Init+0x274>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d807      	bhi.n	8001adc <HAL_I2C_Init+0x84>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4a80      	ldr	r2, [pc, #512]	@ (8001cd0 <HAL_I2C_Init+0x278>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	bf94      	ite	ls
 8001ad4:	2301      	movls	r3, #1
 8001ad6:	2300      	movhi	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	e006      	b.n	8001aea <HAL_I2C_Init+0x92>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4a7d      	ldr	r2, [pc, #500]	@ (8001cd4 <HAL_I2C_Init+0x27c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	bf94      	ite	ls
 8001ae4:	2301      	movls	r3, #1
 8001ae6:	2300      	movhi	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0e7      	b.n	8001cc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4a78      	ldr	r2, [pc, #480]	@ (8001cd8 <HAL_I2C_Init+0x280>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0c9b      	lsrs	r3, r3, #18
 8001afc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a6a      	ldr	r2, [pc, #424]	@ (8001ccc <HAL_I2C_Init+0x274>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d802      	bhi.n	8001b2c <HAL_I2C_Init+0xd4>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	e009      	b.n	8001b40 <HAL_I2C_Init+0xe8>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	4a69      	ldr	r2, [pc, #420]	@ (8001cdc <HAL_I2C_Init+0x284>)
 8001b38:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3c:	099b      	lsrs	r3, r3, #6
 8001b3e:	3301      	adds	r3, #1
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	430b      	orrs	r3, r1
 8001b46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	495c      	ldr	r1, [pc, #368]	@ (8001ccc <HAL_I2C_Init+0x274>)
 8001b5c:	428b      	cmp	r3, r1
 8001b5e:	d819      	bhi.n	8001b94 <HAL_I2C_Init+0x13c>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1e59      	subs	r1, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b6e:	1c59      	adds	r1, r3, #1
 8001b70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b74:	400b      	ands	r3, r1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00a      	beq.n	8001b90 <HAL_I2C_Init+0x138>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e59      	subs	r1, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8e:	e051      	b.n	8001c34 <HAL_I2C_Init+0x1dc>
 8001b90:	2304      	movs	r3, #4
 8001b92:	e04f      	b.n	8001c34 <HAL_I2C_Init+0x1dc>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d111      	bne.n	8001bc0 <HAL_I2C_Init+0x168>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e58      	subs	r0, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	440b      	add	r3, r1
 8001baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf0c      	ite	eq
 8001bb8:	2301      	moveq	r3, #1
 8001bba:	2300      	movne	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	e012      	b.n	8001be6 <HAL_I2C_Init+0x18e>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1e58      	subs	r0, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	0099      	lsls	r1, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Init+0x196>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e022      	b.n	8001c34 <HAL_I2C_Init+0x1dc>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10e      	bne.n	8001c14 <HAL_I2C_Init+0x1bc>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1e58      	subs	r0, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6859      	ldr	r1, [r3, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	440b      	add	r3, r1
 8001c04:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c12:	e00f      	b.n	8001c34 <HAL_I2C_Init+0x1dc>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1e58      	subs	r0, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	0099      	lsls	r1, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	6809      	ldr	r1, [r1, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6911      	ldr	r1, [r2, #16]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68d2      	ldr	r2, [r2, #12]
 8001c6e:	4311      	orrs	r1, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	430b      	orrs	r3, r1
 8001c76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	000186a0 	.word	0x000186a0
 8001cd0:	001e847f 	.word	0x001e847f
 8001cd4:	003d08ff 	.word	0x003d08ff
 8001cd8:	431bde83 	.word	0x431bde83
 8001cdc:	10624dd3 	.word	0x10624dd3

08001ce0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e034      	b.n	8001d5c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001d04:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6852      	ldr	r2, [r2, #4]
 8001d0e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6892      	ldr	r2, [r2, #8]
 8001d18:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001d1a:	f7ff f9a1 	bl	8001060 <HAL_GetTick>
 8001d1e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d20:	e00f      	b.n	8001d42 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001d22:	f7ff f99d 	bl	8001060 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b31      	cmp	r3, #49	@ 0x31
 8001d2e:	d908      	bls.n	8001d42 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e00c      	b.n	8001d5c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e8      	bne.n	8001d22 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001d58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e031      	b.n	8001dda <HAL_MMC_Init+0x76>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d105      	bne.n	8001d8e <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7fe ff91 	bl	8000cb0 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f824 	bl	8001de4 <HAL_MMC_InitCard>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e019      	b.n	8001dda <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDIO_BUS_WIDE_1B)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fb23 	bl	8002414 <HAL_MMC_ConfigWideBusOperation>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b08e      	sub	sp, #56	@ 0x38
 8001de8:	af04      	add	r7, sp, #16
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDIO peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001e00:	2376      	movs	r3, #118	@ 0x76
 8001e02:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hmmc->Instance, Init);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681d      	ldr	r5, [r3, #0]
 8001e08:	466c      	mov	r4, sp
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	f001 fb06 	bl	800342e <SDIO_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status == HAL_ERROR)
 8001e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e058      	b.n	8001ee6 <HAL_MMC_InitCard+0x102>
  }

  /* Disable SDIO Clock */
  __HAL_MMC_DISABLE(hmmc); 
 8001e34:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef0 <HAL_MMC_InitCard+0x10c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  status = SDIO_PowerState_ON(hmmc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 fb2d 	bl	800349e <SDIO_PowerState_ON>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status == HAL_ERROR)
 8001e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_MMC_InitCard+0x72>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e047      	b.n	8001ee6 <HAL_MMC_InitCard+0x102>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 8001e56:	4b26      	ldr	r3, [pc, #152]	@ (8001ef0 <HAL_MMC_InitCard+0x10c>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the MMC initialization  sequence */
  HAL_Delay(2);
 8001e5c:	2002      	movs	r0, #2
 8001e5e:	f7ff f90b 	bl	8001078 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fc8c 	bl	8002780 <MMC_PowerON>
 8001e68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00b      	beq.n	8001e88 <HAL_MMC_InitCard+0xa4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hmmc->ErrorCode |= errorstate;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e02e      	b.n	8001ee6 <HAL_MMC_InitCard+0x102>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fb75 	bl	8002578 <MMC_InitCard>
 8001e8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_MMC_InitCard+0xca>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hmmc->ErrorCode |= errorstate;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e01b      	b.n	8001ee6 <HAL_MMC_InitCard+0x102>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f001 fb83 	bl	80035c2 <SDMMC_CmdBlockLength>
 8001ebc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00f      	beq.n	8001ee4 <HAL_MMC_InitCard+0x100>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <HAL_MMC_InitCard+0x110>)
 8001eca:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_MMC_InitCard+0x102>
  }

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3728      	adds	r7, #40	@ 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bdb0      	pop	{r4, r5, r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	422580a0 	.word	0x422580a0
 8001ef4:	004005ff 	.word	0x004005ff

08001ef8 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f0a:	0f9b      	lsrs	r3, r3, #30
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f16:	0e9b      	lsrs	r3, r3, #26
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f28:	0e1b      	lsrs	r3, r3, #24
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f5c:	0d1b      	lsrs	r3, r3, #20
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f68:	0c1b      	lsrs	r3, r3, #16
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f7a:	0bdb      	lsrs	r3, r3, #15
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f8c:	0b9b      	lsrs	r3, r3, #14
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f9e:	0b5b      	lsrs	r3, r3, #13
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fb0:	0b1b      	lsrs	r3, r3, #12
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fc8:	009a      	lsls	r2, r3, #2
 8001fca:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fce:	4013      	ands	r3, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001fd4:	0f92      	lsrs	r2, r2, #30
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fe0:	0edb      	lsrs	r3, r3, #27
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ff2:	0e1b      	lsrs	r3, r3, #24
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002004:	0d5b      	lsrs	r3, r3, #21
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	b2da      	uxtb	r2, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002016:	0c9b      	lsrs	r3, r3, #18
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	b2da      	uxtb	r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002028:	0bdb      	lsrs	r3, r3, #15
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	b2da      	uxtb	r2, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	761a      	strb	r2, [r3, #24]

  if(MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8002036:	f107 010c 	add.w	r1, r7, #12
 800203a:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800203e:	22d4      	movs	r2, #212	@ 0xd4
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fbed 	bl	8002820 <MMC_ReadExtCSD>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_MMC_GetCardCSD+0x158>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0f0      	b.n	8002232 <HAL_MMC_GetCardCSD+0x33a>
  }

  if(hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002054:	2b00      	cmp	r3, #0
 8002056:	d12a      	bne.n	80020ae <HAL_MMC_GetCardCSD+0x1b6>
  {
    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	7e1b      	ldrb	r3, [r3, #24]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	3302      	adds	r3, #2
 800206e:	2201      	movs	r2, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002078:	fb03 f202 	mul.w	r2, r3, r2
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	7a1b      	ldrb	r3, [r3, #8]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	2201      	movs	r2, #1
 800208c:	409a      	lsls	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	@ 0x54
    hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800209a:	0a52      	lsrs	r2, r2, #9
 800209c:	fb03 f202 	mul.w	r2, r3, r2
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->MmcCard.LogBlockSize = 512U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020ac:	e023      	b.n	80020f6 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if(hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10f      	bne.n	80020d6 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->MmcCard.BlockSize = 512U;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ca:	655a      	str	r2, [r3, #84]	@ 0x54
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020d4:	e00f      	b.n	80020f6 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a58      	ldr	r2, [pc, #352]	@ (800223c <HAL_MMC_GetCardCSD+0x344>)
 80020dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e09d      	b.n	8002232 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020fa:	0b9b      	lsrs	r3, r3, #14
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	b2da      	uxtb	r2, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800210c:	09db      	lsrs	r3, r3, #7
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002114:	b2da      	uxtb	r2, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002124:	b2da      	uxtb	r2, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800212e:	0fdb      	lsrs	r3, r3, #31
 8002130:	b2da      	uxtb	r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800213a:	0f5b      	lsrs	r3, r3, #29
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	b2da      	uxtb	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800214c:	0e9b      	lsrs	r3, r3, #26
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	b2da      	uxtb	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800215e:	0d9b      	lsrs	r3, r3, #22
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	b2da      	uxtb	r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002170:	0d5b      	lsrs	r3, r3, #21
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	b2da      	uxtb	r2, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	b2da      	uxtb	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021a0:	0bdb      	lsrs	r3, r3, #15
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021b4:	0b9b      	lsrs	r3, r3, #14
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021c8:	0b5b      	lsrs	r3, r3, #13
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021dc:	0b1b      	lsrs	r3, r3, #12
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f0:	0a9b      	lsrs	r3, r3, #10
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	b2da      	uxtb	r2, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002220:	b2da      	uxtb	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	004005ff 	.word	0x004005ff

08002240 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08e      	sub	sp, #56	@ 0x38
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7fe ff08 	bl	8001060 <HAL_GetTick>
 8002250:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if(NULL == pExtCSD)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800225c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0cf      	b.n	8002408 <HAL_MMC_GetCardExtCSD+0x1c8>
  }

  if(hmmc->State == HAL_MMC_STATE_READY)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	f040 80c8 	bne.w	8002406 <HAL_MMC_GetCardExtCSD+0x1c6>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	639a      	str	r2, [r3, #56]	@ 0x38

    hmmc->State = HAL_MMC_STATE_BUSY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2203      	movs	r2, #3
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
 8002294:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512;
 8002296:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800229a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800229c:	2390      	movs	r3, #144	@ 0x90
 800229e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80022a0:	2302      	movs	r3, #2
 80022a2:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80022a8:	2301      	movs	r3, #1
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDIO_ConfigData(hmmc->Instance, &config);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f107 0210 	add.w	r2, r7, #16
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 f957 	bl	800356a <SDIO_ConfigData>

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 faa4 	bl	8003810 <SDMMC_CmdSendEXTCSD>
 80022c8:	62b8      	str	r0, [r7, #40]	@ 0x28
    if(errorstate != HAL_MMC_ERROR_NONE)
 80022ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d045      	beq.n	800235c <HAL_MMC_GetCardExtCSD+0x11c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002410 <HAL_MMC_GetCardExtCSD+0x1d0>)
 80022d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022de:	431a      	orrs	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e08b      	b.n	8002408 <HAL_MMC_GetCardExtCSD+0x1c8>
    }

    /* Poll on SDMMC flags */
    while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
    {
      if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXFIFOHF))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d013      	beq.n	8002326 <HAL_MMC_GetCardExtCSD+0xe6>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80022fe:	2300      	movs	r3, #0
 8002300:	637b      	str	r3, [r7, #52]	@ 0x34
 8002302:	e00d      	b.n	8002320 <HAL_MMC_GetCardExtCSD+0xe0>
        {
          *tmp_buf = SDIO_ReadFIFO(hmmc->Instance);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f001 f8bb 	bl	8003484 <SDIO_ReadFIFO>
 800230e:	4602      	mov	r2, r0
 8002310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002312:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8002314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002316:	3304      	adds	r3, #4
 8002318:	633b      	str	r3, [r7, #48]	@ 0x30
        for(count = 0U; count < 8U; count++)
 800231a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231c:	3301      	adds	r3, #1
 800231e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002322:	2b07      	cmp	r3, #7
 8002324:	d9ee      	bls.n	8002304 <HAL_MMC_GetCardExtCSD+0xc4>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002326:	f7fe fe9b 	bl	8001060 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d902      	bls.n	800233c <HAL_MMC_GetCardExtCSD+0xfc>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10f      	bne.n	800235c <HAL_MMC_GetCardExtCSD+0x11c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a33      	ldr	r2, [pc, #204]	@ (8002410 <HAL_MMC_GetCardExtCSD+0x1d0>)
 8002342:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002348:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->State= HAL_MMC_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e055      	b.n	8002408 <HAL_MMC_GetCardExtCSD+0x1c8>
    while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002362:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0c2      	beq.n	80022f0 <HAL_MMC_GetCardExtCSD+0xb0>
      }
    }

    /* Get error state */
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DTIMEOUT))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00f      	beq.n	8002398 <HAL_MMC_GetCardExtCSD+0x158>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a24      	ldr	r2, [pc, #144]	@ (8002410 <HAL_MMC_GetCardExtCSD+0x1d0>)
 800237e:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002384:	f043 0208 	orr.w	r2, r3, #8
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e037      	b.n	8002408 <HAL_MMC_GetCardExtCSD+0x1c8>
    }
    else if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DCRCFAIL))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00f      	beq.n	80023c6 <HAL_MMC_GetCardExtCSD+0x186>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a19      	ldr	r2, [pc, #100]	@ (8002410 <HAL_MMC_GetCardExtCSD+0x1d0>)
 80023ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	f043 0202 	orr.w	r2, r3, #2
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e020      	b.n	8002408 <HAL_MMC_GetCardExtCSD+0x1c8>
    }
    else if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00f      	beq.n	80023f4 <HAL_MMC_GetCardExtCSD+0x1b4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <HAL_MMC_GetCardExtCSD+0x1d0>)
 80023da:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e0:	f043 0220 	orr.w	r2, r3, #32
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e009      	b.n	8002408 <HAL_MMC_GetCardExtCSD+0x1c8>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80023fc:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3738      	adds	r7, #56	@ 0x38
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	004005ff 	.word	0x004005ff

08002414 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8002414:	b5b0      	push	{r4, r5, r7, lr}
 8002416:	b090      	sub	sp, #64	@ 0x40
 8002418:	af04      	add	r7, sp, #16
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2203      	movs	r2, #3
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  errorstate = MMC_PwrClassUpdate(hmmc, WideMode);
 800242a:	6839      	ldr	r1, [r7, #0]
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 faa5 	bl	800297c <MMC_PwrClassUpdate>
 8002432:	62b8      	str	r0, [r7, #40]	@ 0x28

  if(errorstate == HAL_MMC_ERROR_NONE)
 8002434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002436:	2b00      	cmp	r3, #0
 8002438:	d17d      	bne.n	8002536 <HAL_MMC_ConfigWideBusOperation+0x122>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002440:	d107      	bne.n	8002452 <HAL_MMC_ConfigWideBusOperation+0x3e>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4948      	ldr	r1, [pc, #288]	@ (8002568 <HAL_MMC_ConfigWideBusOperation+0x154>)
 8002448:	4618      	mov	r0, r3
 800244a:	f001 f9bf 	bl	80037cc <SDMMC_CmdSwitch>
 800244e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002450:	e019      	b.n	8002486 <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002458:	d107      	bne.n	800246a <HAL_MMC_ConfigWideBusOperation+0x56>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4943      	ldr	r1, [pc, #268]	@ (800256c <HAL_MMC_ConfigWideBusOperation+0x158>)
 8002460:	4618      	mov	r0, r3
 8002462:	f001 f9b3 	bl	80037cc <SDMMC_CmdSwitch>
 8002466:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002468:	e00d      	b.n	8002486 <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_MMC_ConfigWideBusOperation+0x6c>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	493e      	ldr	r1, [pc, #248]	@ (8002570 <HAL_MMC_ConfigWideBusOperation+0x15c>)
 8002476:	4618      	mov	r0, r3
 8002478:	f001 f9a8 	bl	80037cc <SDMMC_CmdSwitch>
 800247c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800247e:	e002      	b.n	8002486 <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8002480:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002484:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if(errorstate == HAL_MMC_ERROR_NONE)
 8002486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	d154      	bne.n	8002536 <HAL_MMC_ConfigWideBusOperation+0x122>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 800248c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002490:	62fb      	str	r3, [r7, #44]	@ 0x2c
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f001 f953 	bl	800374a <SDMMC_CmdSendStatus>
 80024a4:	62b8      	str	r0, [r7, #40]	@ 0x28
        if(errorstate != HAL_MMC_ERROR_NONE)
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d112      	bne.n	80024d2 <HAL_MMC_ConfigWideBusOperation+0xbe>
        {
          break;
        }
        
        /* Get command response */
        response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 f846 	bl	8003544 <SDIO_GetResponse>
 80024b8:	6278      	str	r0, [r7, #36]	@ 0x24
        count--;
 80024ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024bc:	3b01      	subs	r3, #1
 80024be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }while(((response & 0x100U) == 0U) && (count != 0U));
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <HAL_MMC_ConfigWideBusOperation+0xc0>
 80024ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e0      	bne.n	8002492 <HAL_MMC_ConfigWideBusOperation+0x7e>
 80024d0:	e000      	b.n	80024d4 <HAL_MMC_ConfigWideBusOperation+0xc0>
          break;
 80024d2:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 80024d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d027      	beq.n	800252a <HAL_MMC_ConfigWideBusOperation+0x116>
 80024da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d124      	bne.n	800252a <HAL_MMC_ConfigWideBusOperation+0x116>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_MMC_ConfigWideBusOperation+0xde>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80024ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024ee:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((response & 0x80U) != 0U)
 80024f0:	e021      	b.n	8002536 <HAL_MMC_ConfigWideBusOperation+0x122>
        }
        else
        {
          /* Configure the SDIO peripheral */
          Init = hmmc->Init;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f107 040c 	add.w	r4, r7, #12
 80024f8:	1d1d      	adds	r5, r3, #4
 80024fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002502:	e884 0003 	stmia.w	r4, {r0, r1}
          Init.BusWide = WideMode;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	61bb      	str	r3, [r7, #24]
          (void)SDIO_Init(hmmc->Instance, Init);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681d      	ldr	r5, [r3, #0]
 800250e:	466c      	mov	r4, sp
 8002510:	f107 0318 	add.w	r3, r7, #24
 8002514:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002518:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002522:	4628      	mov	r0, r5
 8002524:	f000 ff83 	bl	800342e <SDIO_Init>
        if ((response & 0x80U) != 0U)
 8002528:	e005      	b.n	8002536 <HAL_MMC_ConfigWideBusOperation+0x122>
        }
      }
      else if (count == 0U)
 800252a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <HAL_MMC_ConfigWideBusOperation+0x122>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8002530:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002534:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(errorstate != HAL_MMC_ERROR_NONE)
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <HAL_MMC_ConfigWideBusOperation+0x148>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <HAL_MMC_ConfigWideBusOperation+0x160>)
 800254a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_MMC_ConfigWideBusOperation+0x14a>
  }

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3730      	adds	r7, #48	@ 0x30
 8002562:	46bd      	mov	sp, r7
 8002564:	bdb0      	pop	{r4, r5, r7, pc}
 8002566:	bf00      	nop
 8002568:	03b70200 	.word	0x03b70200
 800256c:	03b70100 	.word	0x03b70100
 8002570:	03b70000 	.word	0x03b70000
 8002574:	004005ff 	.word	0x004005ff

08002578 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b09a      	sub	sp, #104	@ 0x68
 800257c:	af04      	add	r7, sp, #16
 800257e:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8002580:	2302      	movs	r3, #2
 8002582:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  MMC_InitTypeDef Init;

  /* Check the power State */
  if(SDIO_GetPowerState(hmmc->Instance) == 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 ff95 	bl	80034ba <SDIO_GetPowerState>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8002596:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800259a:	e0ec      	b.n	8002776 <MMC_InitCard+0x1fe>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 f871 	bl	8003688 <SDMMC_CmdSendCID>
 80025a6:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 80025a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MMC_InitCard+0x3a>
  {
    return errorstate;
 80025ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025b0:	e0e1      	b.n	8002776 <MMC_InitCard+0x1fe>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 ffc3 	bl	8003544 <SDIO_GetResponse>
 80025be:	4602      	mov	r2, r0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[1U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP2);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2104      	movs	r1, #4
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 ffba 	bl	8003544 <SDIO_GetResponse>
 80025d0:	4602      	mov	r2, r0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	675a      	str	r2, [r3, #116]	@ 0x74
    hmmc->CID[2U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP3);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2108      	movs	r1, #8
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 ffb1 	bl	8003544 <SDIO_GetResponse>
 80025e2:	4602      	mov	r2, r0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	679a      	str	r2, [r3, #120]	@ 0x78
    hmmc->CID[3U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP4);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	210c      	movs	r1, #12
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 ffa8 	bl	8003544 <SDIO_GetResponse>
 80025f4:	4602      	mov	r2, r0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f001 f87c 	bl	8003702 <SDMMC_CmdSetRelAddMmc>
 800260a:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 800260c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MMC_InitCard+0x9e>
  {
    return errorstate;
 8002612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002614:	e0af      	b.n	8002776 <MMC_InitCard+0x1fe>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8002616:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f001 f84a 	bl	80036c4 <SDMMC_CmdSendCSD>
 8002630:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MMC_InitCard+0xc4>
  {
    return errorstate;
 8002638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800263a:	e09c      	b.n	8002776 <MMC_InitCard+0x1fe>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f000 ff7e 	bl	8003544 <SDIO_GetResponse>
 8002648:	4602      	mov	r2, r0
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[1U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP2);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2104      	movs	r1, #4
 8002654:	4618      	mov	r0, r3
 8002656:	f000 ff75 	bl	8003544 <SDIO_GetResponse>
 800265a:	4602      	mov	r2, r0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	665a      	str	r2, [r3, #100]	@ 0x64
    hmmc->CSD[2U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP3);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2108      	movs	r1, #8
 8002666:	4618      	mov	r0, r3
 8002668:	f000 ff6c 	bl	8003544 <SDIO_GetResponse>
 800266c:	4602      	mov	r2, r0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CSD[3U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP4);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	210c      	movs	r1, #12
 8002678:	4618      	mov	r0, r3
 800267a:	f000 ff63 	bl	8003544 <SDIO_GetResponse>
 800267e:	4602      	mov	r2, r0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDIO_GetResponse(hmmc->Instance, SDIO_RESP2) >> 20U);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2104      	movs	r1, #4
 800268a:	4618      	mov	r0, r3
 800268c:	f000 ff5a 	bl	8003544 <SDIO_GetResponse>
 8002690:	4603      	mov	r3, r0
 8002692:	0d1a      	lsrs	r2, r3, #20
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6819      	ldr	r1, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	2200      	movs	r2, #0
 80026a4:	461c      	mov	r4, r3
 80026a6:	4615      	mov	r5, r2
 80026a8:	4622      	mov	r2, r4
 80026aa:	462b      	mov	r3, r5
 80026ac:	4608      	mov	r0, r1
 80026ae:	f000 ffaa 	bl	8003606 <SDMMC_CmdSelDesel>
 80026b2:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 80026b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MMC_InitCard+0x146>
  {
    return errorstate;
 80026ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026bc:	e05b      	b.n	8002776 <MMC_InitCard+0x1fe>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 80026be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026c2:	4619      	mov	r1, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff fc17 	bl	8001ef8 <HAL_MMC_GetCardCSD>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <MMC_InitCard+0x15e>
  {
    return hmmc->ErrorCode;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d4:	e04f      	b.n	8002776 <MMC_InitCard+0x1fe>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	4619      	mov	r1, r3
 80026e2:	4610      	mov	r0, r2
 80026e4:	f001 f831 	bl	800374a <SDMMC_CmdSendStatus>
 80026e8:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 80026ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <MMC_InitCard+0x184>
  {
    hmmc->ErrorCode |= errorstate;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3380      	adds	r3, #128	@ 0x80
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fd9a 	bl	8002240 <HAL_MMC_GetCardExtCSD>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <MMC_InitCard+0x1a0>
  {
    return hmmc->ErrorCode;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002716:	e02e      	b.n	8002776 <MMC_InitCard+0x1fe>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002720:	041b      	lsls	r3, r3, #16
 8002722:	4619      	mov	r1, r3
 8002724:	4610      	mov	r0, r2
 8002726:	f001 f810 	bl	800374a <SDMMC_CmdSendStatus>
 800272a:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 800272c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <MMC_InitCard+0x1c6>
  {
    hmmc->ErrorCode |= errorstate;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Configure the SDIO peripheral */
  Init = hmmc->Init;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f107 040c 	add.w	r4, r7, #12
 8002744:	1d1d      	adds	r5, r3, #4
 8002746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800274a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800274e:	e884 0003 	stmia.w	r4, {r0, r1}
  Init.BusWide = SDIO_BUS_WIDE_1B;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  (void)SDIO_Init(hmmc->Instance, Init);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681d      	ldr	r5, [r3, #0]
 800275a:	466c      	mov	r4, sp
 800275c:	f107 0318 	add.w	r3, r7, #24
 8002760:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002764:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800276e:	4628      	mov	r0, r5
 8002770:	f000 fe5d 	bl	800342e <SDIO_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3758      	adds	r7, #88	@ 0x58
 800277a:	46bd      	mov	sp, r7
 800277c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002780 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f000 ff57 	bl	800364c <SDMMC_CmdGoIdleState>
 800279e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d027      	beq.n	80027f6 <MMC_PowerON+0x76>
  {
    return errorstate;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	e034      	b.n	8002814 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	60ba      	str	r2, [r7, #8]
 80027b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d102      	bne.n	80027be <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 80027b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027bc:	e02a      	b.n	8002814 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4916      	ldr	r1, [pc, #88]	@ (800281c <MMC_PowerON+0x9c>)
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 ffe2 	bl	800378e <SDMMC_CmdOpCondition>
 80027ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 80027d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80027d6:	e01d      	b.n	8002814 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 feb0 	bl	8003544 <SDIO_GetResponse>
 80027e4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	0fdb      	lsrs	r3, r3, #31
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <MMC_PowerON+0x72>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <MMC_PowerON+0x74>
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0d6      	beq.n	80027aa <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	0e1b      	lsrs	r3, r3, #24
 8002800:	2bc0      	cmp	r3, #192	@ 0xc0
 8002802:	d103      	bne.n	800280c <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	645a      	str	r2, [r3, #68]	@ 0x44
 800280a:	e002      	b.n	8002812 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  return HAL_MMC_ERROR_NONE;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	c0ff8000 	.word	0xc0ff8000

08002820 <MMC_ReadExtCSD>:
  * @param  FieldIndex: Index of the field to be read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static uint32_t MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData, uint16_t FieldIndex, uint32_t Timeout)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b090      	sub	sp, #64	@ 0x40
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	80fb      	strh	r3, [r7, #6]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002830:	f7fe fc16 	bl	8001060 <HAL_GetTick>
 8002834:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2200      	movs	r2, #0
 8002846:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002848:	f04f 33ff 	mov.w	r3, #4294967295
 800284c:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512;
 800284e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002852:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002854:	2390      	movs	r3, #144	@ 0x90
 8002856:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002858:	2302      	movs	r3, #2
 800285a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002860:	2301      	movs	r3, #1
 8002862:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDIO_ConfigData(hmmc->Instance, &config);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f107 0214 	add.w	r2, r7, #20
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fe7b 	bl	800356a <SDIO_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f000 ffc8 	bl	8003810 <SDMMC_CmdSendEXTCSD>
 8002880:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002884:	2b00      	cmp	r3, #0
 8002886:	d04e      	beq.n	8002926 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a3a      	ldr	r2, [pc, #232]	@ (8002978 <MMC_ReadExtCSD+0x158>)
 800288e:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002896:	431a      	orrs	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e062      	b.n	800296e <MMC_ReadExtCSD+0x14e>
  }

  /* Poll on SDMMC flags */
  while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
  {
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXFIFOHF))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01c      	beq.n	80028f0 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for(count = 0U; count < 8U; count++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ba:	e013      	b.n	80028e4 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDIO_ReadFIFO(hmmc->Instance);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fddf 	bl	8003484 <SDIO_ReadFIFO>
 80028c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex/4U))
 80028c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028cc:	4413      	add	r3, r2
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	0892      	lsrs	r2, r2, #2
 80028d2:	b292      	uxth	r2, r2
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d102      	bne.n	80028de <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028dc:	601a      	str	r2, [r3, #0]
      for(count = 0U; count < 8U; count++)
 80028de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e0:	3301      	adds	r3, #1
 80028e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e6:	2b07      	cmp	r3, #7
 80028e8:	d9e8      	bls.n	80028bc <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	3308      	adds	r3, #8
 80028ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80028f0:	f7fe fbb6 	bl	8001060 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d902      	bls.n	8002906 <MMC_ReadExtCSD+0xe6>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1b      	ldr	r2, [pc, #108]	@ (8002978 <MMC_ReadExtCSD+0x158>)
 800290c:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State= HAL_MMC_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e023      	b.n	800296e <MMC_ReadExtCSD+0x14e>
  while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0b9      	beq.n	80028a8 <MMC_ReadExtCSD+0x88>
    }
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f000 ff02 	bl	800374a <SDMMC_CmdSendStatus>
 8002946:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <MMC_ReadExtCSD+0x13a>
  {
    hmmc->ErrorCode |= errorstate;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002954:	431a      	orrs	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002962:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3740      	adds	r7, #64	@ 0x40
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	004005ff 	.word	0x004005ff

0800297c <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t count;
  uint32_t response = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  uint32_t power_class, supported_pwr_class;

  if((Wide == SDIO_BUS_WIDE_8B) || (Wide == SDIO_BUS_WIDE_4B))
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002994:	d003      	beq.n	800299e <MMC_PwrClassUpdate+0x22>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800299c:	d174      	bne.n	8002a88 <MMC_PwrClassUpdate+0x10c>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]

    /* Read the PowerClass field of the Extended CSD register */
    if(MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 80029a2:	f107 010c 	add.w	r1, r7, #12
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
 80029aa:	22bb      	movs	r2, #187	@ 0xbb
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff37 	bl	8002820 <MMC_ReadExtCSD>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <MMC_PwrClassUpdate+0x44>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80029b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	e002      	b.n	80029c6 <MMC_PwrClassUpdate+0x4a>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	0e1b      	lsrs	r3, r3, #24
 80029c4:	60fb      	str	r3, [r7, #12]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    /* Field PWR_CL_26_xxx [201 or 203] */
    supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX/4)] >> MMC_EXT_CSD_PWR_CL_26_POS) & 0x000000FFU);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80029cc:	0e1b      	lsrs	r3, r3, #24
 80029ce:	613b      	str	r3, [r7, #16]

    if(errorstate == HAL_MMC_ERROR_NONE)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d158      	bne.n	8002a88 <MMC_PwrClassUpdate+0x10c>
    {
      if(Wide == SDIO_BUS_WIDE_8B)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029dc:	d102      	bne.n	80029e4 <MMC_PwrClassUpdate+0x68>
      {
        /* Bit [7:4] : power class for 8-bits bus configuration - Bit [3:0] : power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	613b      	str	r3, [r7, #16]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4053      	eors	r3, r2
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04a      	beq.n	8002a88 <MMC_PwrClassUpdate+0x10c>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80029fe:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 8002a02:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f000 fedf 	bl	80037cc <SDMMC_CmdSwitch>
 8002a0e:	6178      	str	r0, [r7, #20]

        if(errorstate == HAL_MMC_ERROR_NONE)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d138      	bne.n	8002a88 <MMC_PwrClassUpdate+0x10c>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8002a16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a1a:	61fb      	str	r3, [r7, #28]
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f000 fe8e 	bl	800374a <SDMMC_CmdSendStatus>
 8002a2e:	6178      	str	r0, [r7, #20]
            if(errorstate != HAL_MMC_ERROR_NONE)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d112      	bne.n	8002a5c <MMC_PwrClassUpdate+0xe0>
            {
              break;
            }

            /* Get command response */
            response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fd81 	bl	8003544 <SDIO_GetResponse>
 8002a42:	61b8      	str	r0, [r7, #24]
            count--;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
          }while(((response & 0x100U) == 0U) && (count != 0U));
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <MMC_PwrClassUpdate+0xe2>
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1e0      	bne.n	8002a1c <MMC_PwrClassUpdate+0xa0>
 8002a5a:	e000      	b.n	8002a5e <MMC_PwrClassUpdate+0xe2>
              break;
 8002a5c:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <MMC_PwrClassUpdate+0x100>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d108      	bne.n	8002a7c <MMC_PwrClassUpdate+0x100>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d009      	beq.n	8002a88 <MMC_PwrClassUpdate+0x10c>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8002a74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002a78:	617b      	str	r3, [r7, #20]
            if ((response & 0x80U) != 0U)
 8002a7a:	e005      	b.n	8002a88 <MMC_PwrClassUpdate+0x10c>
            }
          }
          else if (count == 0U)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <MMC_PwrClassUpdate+0x10c>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8002a82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002a86:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return errorstate;
 8002a88:	697b      	ldr	r3, [r7, #20]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e267      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d075      	beq.n	8002b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ab2:	4b88      	ldr	r3, [pc, #544]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d00c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002abe:	4b85      	ldr	r3, [pc, #532]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d112      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aca:	4b82      	ldr	r3, [pc, #520]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ad2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ad6:	d10b      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	4b7e      	ldr	r3, [pc, #504]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d05b      	beq.n	8002b9c <HAL_RCC_OscConfig+0x108>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d157      	bne.n	8002b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e242      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af8:	d106      	bne.n	8002b08 <HAL_RCC_OscConfig+0x74>
 8002afa:	4b76      	ldr	r3, [pc, #472]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a75      	ldr	r2, [pc, #468]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e01d      	b.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x98>
 8002b12:	4b70      	ldr	r3, [pc, #448]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6f      	ldr	r2, [pc, #444]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6c      	ldr	r2, [pc, #432]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b2c:	4b69      	ldr	r3, [pc, #420]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a68      	ldr	r2, [pc, #416]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b66      	ldr	r3, [pc, #408]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a65      	ldr	r2, [pc, #404]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fa88 	bl	8001060 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b54:	f7fe fa84 	bl	8001060 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e207      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b5b      	ldr	r3, [pc, #364]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0xc0>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fa74 	bl	8001060 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fa70 	bl	8001060 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	@ 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1f3      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	4b51      	ldr	r3, [pc, #324]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0xe8>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002baa:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb6:	4b47      	ldr	r3, [pc, #284]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d11c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc2:	4b44      	ldr	r3, [pc, #272]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	4b41      	ldr	r3, [pc, #260]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x152>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e1c7      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4937      	ldr	r1, [pc, #220]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	e03a      	b.n	8002c72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c04:	4b34      	ldr	r3, [pc, #208]	@ (8002cd8 <HAL_RCC_OscConfig+0x244>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fa29 	bl	8001060 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fe fa25 	bl	8001060 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1a8      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4925      	ldr	r1, [pc, #148]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b24      	ldr	r3, [pc, #144]	@ (8002cd8 <HAL_RCC_OscConfig+0x244>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fa08 	bl	8001060 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c54:	f7fe fa04 	bl	8001060 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e187      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d036      	beq.n	8002cec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <HAL_RCC_OscConfig+0x248>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe f9e8 	bl	8001060 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c94:	f7fe f9e4 	bl	8001060 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e167      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x200>
 8002cb2:	e01b      	b.n	8002cec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb4:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <HAL_RCC_OscConfig+0x248>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7fe f9d1 	bl	8001060 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	e00e      	b.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc2:	f7fe f9cd 	bl	8001060 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d907      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e150      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	42470000 	.word	0x42470000
 8002cdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce0:	4b88      	ldr	r3, [pc, #544]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ea      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8097 	beq.w	8002e28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfe:	4b81      	ldr	r3, [pc, #516]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10f      	bne.n	8002d2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	4a7c      	ldr	r2, [pc, #496]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b77      	ldr	r3, [pc, #476]	@ (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d36:	4b74      	ldr	r3, [pc, #464]	@ (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a73      	ldr	r2, [pc, #460]	@ (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d42:	f7fe f98d 	bl	8001060 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fe f989 	bl	8001060 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e10c      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x2ea>
 8002d70:	4b64      	ldr	r3, [pc, #400]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d74:	4a63      	ldr	r2, [pc, #396]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d7c:	e01c      	b.n	8002db8 <HAL_RCC_OscConfig+0x324>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x30c>
 8002d86:	4b5f      	ldr	r3, [pc, #380]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8a:	4a5e      	ldr	r2, [pc, #376]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	f043 0304 	orr.w	r3, r3, #4
 8002d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d92:	4b5c      	ldr	r3, [pc, #368]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d96:	4a5b      	ldr	r2, [pc, #364]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0x324>
 8002da0:	4b58      	ldr	r3, [pc, #352]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	4a57      	ldr	r2, [pc, #348]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002da6:	f023 0301 	bic.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dac:	4b55      	ldr	r3, [pc, #340]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db0:	4a54      	ldr	r2, [pc, #336]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002db2:	f023 0304 	bic.w	r3, r3, #4
 8002db6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe f94e 	bl	8001060 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fe f94a 	bl	8001060 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0cb      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dde:	4b49      	ldr	r3, [pc, #292]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ee      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x334>
 8002dea:	e014      	b.n	8002e16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7fe f938 	bl	8001060 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7fe f934 	bl	8001060 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e0b5      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ee      	bne.n	8002df4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1c:	4b39      	ldr	r3, [pc, #228]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	4a38      	ldr	r2, [pc, #224]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80a1 	beq.w	8002f74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e32:	4b34      	ldr	r3, [pc, #208]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d05c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d141      	bne.n	8002eca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e46:	4b31      	ldr	r3, [pc, #196]	@ (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f908 	bl	8001060 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe f904 	bl	8001060 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e087      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	4b27      	ldr	r3, [pc, #156]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	491b      	ldr	r1, [pc, #108]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe f8dd 	bl	8001060 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe f8d9 	bl	8001060 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e05c      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebc:	4b11      	ldr	r3, [pc, #68]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x416>
 8002ec8:	e054      	b.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b10      	ldr	r3, [pc, #64]	@ (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe f8c6 	bl	8001060 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe f8c2 	bl	8001060 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e045      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x444>
 8002ef6:	e03d      	b.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e038      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	@ (8002f80 <HAL_RCC_OscConfig+0x4ec>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d028      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d121      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d111      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0cc      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f98:	4b68      	ldr	r3, [pc, #416]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d90c      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b65      	ldr	r3, [pc, #404]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b63      	ldr	r3, [pc, #396]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0b8      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd8:	4b59      	ldr	r3, [pc, #356]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff0:	4b53      	ldr	r3, [pc, #332]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b50      	ldr	r3, [pc, #320]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	494d      	ldr	r1, [pc, #308]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d044      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b47      	ldr	r3, [pc, #284]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d119      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e07f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d003      	beq.n	8003042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303e:	2b03      	cmp	r3, #3
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	4b3f      	ldr	r3, [pc, #252]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003052:	4b3b      	ldr	r3, [pc, #236]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e067      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003062:	4b37      	ldr	r3, [pc, #220]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4934      	ldr	r1, [pc, #208]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003074:	f7fd fff4 	bl	8001060 <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	e00a      	b.n	8003092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307c:	f7fd fff0 	bl	8001060 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e04f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	4b2b      	ldr	r3, [pc, #172]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 020c 	and.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d1eb      	bne.n	800307c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a4:	4b25      	ldr	r3, [pc, #148]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d20c      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b22      	ldr	r3, [pc, #136]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b20      	ldr	r3, [pc, #128]	@ (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e032      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d8:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4916      	ldr	r1, [pc, #88]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f6:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	490e      	ldr	r1, [pc, #56]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800310a:	f000 f821 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	490a      	ldr	r1, [pc, #40]	@ (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	4a09      	ldr	r2, [pc, #36]	@ (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd ff54 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023c00 	.word	0x40023c00
 8003140:	40023800 	.word	0x40023800
 8003144:	08003c04 	.word	0x08003c04
 8003148:	20000000 	.word	0x20000000
 800314c:	20000004 	.word	0x20000004

08003150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003154:	b090      	sub	sp, #64	@ 0x40
 8003156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	637b      	str	r3, [r7, #52]	@ 0x34
 800315c:	2300      	movs	r3, #0
 800315e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003160:	2300      	movs	r3, #0
 8003162:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003168:	4b59      	ldr	r3, [pc, #356]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d00d      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x40>
 8003174:	2b08      	cmp	r3, #8
 8003176:	f200 80a1 	bhi.w	80032bc <HAL_RCC_GetSysClockFreq+0x16c>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x34>
 800317e:	2b04      	cmp	r3, #4
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x3a>
 8003182:	e09b      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b53      	ldr	r3, [pc, #332]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003188:	e09b      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800318a:	4b53      	ldr	r3, [pc, #332]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800318c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800318e:	e098      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003190:	4b4f      	ldr	r3, [pc, #316]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003198:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800319a:	4b4d      	ldr	r3, [pc, #308]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d028      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b4a      	ldr	r3, [pc, #296]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	2200      	movs	r2, #0
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031b8:	2100      	movs	r1, #0
 80031ba:	4b47      	ldr	r3, [pc, #284]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031bc:	fb03 f201 	mul.w	r2, r3, r1
 80031c0:	2300      	movs	r3, #0
 80031c2:	fb00 f303 	mul.w	r3, r0, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	4a43      	ldr	r2, [pc, #268]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031ca:	fba0 1202 	umull	r1, r2, r0, r2
 80031ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031d0:	460a      	mov	r2, r1
 80031d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80031d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031d6:	4413      	add	r3, r2
 80031d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031dc:	2200      	movs	r2, #0
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	61fa      	str	r2, [r7, #28]
 80031e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031ea:	f7fc fff3 	bl	80001d4 <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4613      	mov	r3, r2
 80031f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031f6:	e053      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f8:	4b35      	ldr	r3, [pc, #212]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	2200      	movs	r2, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	617a      	str	r2, [r7, #20]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800320a:	f04f 0b00 	mov.w	fp, #0
 800320e:	4652      	mov	r2, sl
 8003210:	465b      	mov	r3, fp
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	0159      	lsls	r1, r3, #5
 800321c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003220:	0150      	lsls	r0, r2, #5
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	ebb2 080a 	subs.w	r8, r2, sl
 800322a:	eb63 090b 	sbc.w	r9, r3, fp
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800323a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800323e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003242:	ebb2 0408 	subs.w	r4, r2, r8
 8003246:	eb63 0509 	sbc.w	r5, r3, r9
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	00eb      	lsls	r3, r5, #3
 8003254:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003258:	00e2      	lsls	r2, r4, #3
 800325a:	4614      	mov	r4, r2
 800325c:	461d      	mov	r5, r3
 800325e:	eb14 030a 	adds.w	r3, r4, sl
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	eb45 030b 	adc.w	r3, r5, fp
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003276:	4629      	mov	r1, r5
 8003278:	028b      	lsls	r3, r1, #10
 800327a:	4621      	mov	r1, r4
 800327c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003280:	4621      	mov	r1, r4
 8003282:	028a      	lsls	r2, r1, #10
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328a:	2200      	movs	r2, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	60fa      	str	r2, [r7, #12]
 8003290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003294:	f7fc ff9e 	bl	80001d4 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4613      	mov	r3, r2
 800329e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	3301      	adds	r3, #1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80032b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80032be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3740      	adds	r7, #64	@ 0x40
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	017d7840 	.word	0x017d7840

080032dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e0:	4b03      	ldr	r3, [pc, #12]	@ (80032f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000000 	.word	0x20000000

080032f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032f8:	f7ff fff0 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b05      	ldr	r3, [pc, #20]	@ (8003314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	0a9b      	lsrs	r3, r3, #10
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4903      	ldr	r1, [pc, #12]	@ (8003318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	08003c14 	.word	0x08003c14

0800331c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e07b      	b.n	8003426 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d108      	bne.n	8003348 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800333e:	d009      	beq.n	8003354 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	61da      	str	r2, [r3, #28]
 8003346:	e005      	b.n	8003354 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fd06 	bl	8000d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800338a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d8:	ea42 0103 	orr.w	r1, r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	f003 0104 	and.w	r1, r3, #4
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	f003 0210 	and.w	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003414:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800342e:	b084      	sub	sp, #16
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	f107 001c 	add.w	r0, r7, #28
 800343c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003444:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003446:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003448:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800344c:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800344e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003450:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003454:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8003458:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8003468:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	b004      	add	sp, #16
 8003482:	4770      	bx	lr

08003484 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2203      	movs	r2, #3
 80034aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0303 	and.w	r3, r3, #3
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80034f4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80034fa:	431a      	orrs	r2, r3
                       Command->CPSM);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003500:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003510:	f023 030f 	bic.w	r3, r3, #15
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	b2db      	uxtb	r3, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3314      	adds	r3, #20
 8003552:	461a      	mov	r2, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	4413      	add	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
}  
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003590:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003596:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800359c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0

}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b088      	sub	sp, #32
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80035d0:	2310      	movs	r3, #16
 80035d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035d4:	2340      	movs	r3, #64	@ 0x40
 80035d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035e2:	f107 0308 	add.w	r3, r7, #8
 80035e6:	4619      	mov	r1, r3
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff74 	bl	80034d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80035ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f2:	2110      	movs	r1, #16
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f92d 	bl	8003854 <SDMMC_GetCmdResp1>
 80035fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035fc:	69fb      	ldr	r3, [r7, #28]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b08a      	sub	sp, #40	@ 0x28
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003616:	2307      	movs	r3, #7
 8003618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800361a:	2340      	movs	r3, #64	@ 0x40
 800361c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003626:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	4619      	mov	r1, r3
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f7ff ff51 	bl	80034d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003638:	2107      	movs	r1, #7
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f90a 	bl	8003854 <SDMMC_GetCmdResp1>
 8003640:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003644:	4618      	mov	r0, r3
 8003646:	3728      	adds	r7, #40	@ 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003664:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003668:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800366a:	f107 0308 	add.w	r3, r7, #8
 800366e:	4619      	mov	r1, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff30 	bl	80034d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fa60 	bl	8003b3c <SDMMC_GetCmdError>
 800367c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800367e:	69fb      	ldr	r3, [r7, #28]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003694:	2302      	movs	r3, #2
 8003696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003698:	23c0      	movs	r3, #192	@ 0xc0
 800369a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036a6:	f107 0308 	add.w	r3, r7, #8
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff12 	bl	80034d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f9bc 	bl	8003a30 <SDMMC_GetCmdResp2>
 80036b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036ba:	69fb      	ldr	r3, [r7, #28]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80036d2:	2309      	movs	r3, #9
 80036d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80036d6:	23c0      	movs	r3, #192	@ 0xc0
 80036d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036e4:	f107 0308 	add.w	r3, r7, #8
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fef3 	bl	80034d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f99d 	bl	8003a30 <SDMMC_GetCmdResp2>
 80036f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036f8:	69fb      	ldr	r3, [r7, #28]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDIOx Pointer to SDIO register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDIO_TypeDef *SDIOx, uint16_t RCA)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b088      	sub	sp, #32
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	807b      	strh	r3, [r7, #2]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003714:	2303      	movs	r3, #3
 8003716:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003718:	2340      	movs	r3, #64	@ 0x40
 800371a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003724:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	4619      	mov	r1, r3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fed2 	bl	80034d6 <SDIO_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_REL_ADDR, SDIO_CMDTIMEOUT);
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	2103      	movs	r1, #3
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f88b 	bl	8003854 <SDMMC_GetCmdResp1>
 800373e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003740:	69fb      	ldr	r3, [r7, #28]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b088      	sub	sp, #32
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003758:	230d      	movs	r3, #13
 800375a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800375c:	2340      	movs	r3, #64	@ 0x40
 800375e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003764:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003768:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800376a:	f107 0308 	add.w	r3, r7, #8
 800376e:	4619      	mov	r1, r3
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff feb0 	bl	80034d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377a:	210d      	movs	r1, #13
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f869 	bl	8003854 <SDMMC_GetCmdResp1>
 8003782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003784:	69fb      	ldr	r3, [r7, #28]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <SDMMC_CmdOpCondition>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b088      	sub	sp, #32
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800379c:	2301      	movs	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037a0:	2340      	movs	r3, #64	@ 0x40
 80037a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037ae:	f107 0308 	add.w	r3, r7, #8
 80037b2:	4619      	mov	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff fe8e 	bl	80034d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f980 	bl	8003ac0 <SDMMC_GetCmdResp3>
 80037c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037c2:	69fb      	ldr	r3, [r7, #28]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <SDMMC_CmdSwitch>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN */
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80037da:	2306      	movs	r3, #6
 80037dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037de:	2340      	movs	r3, #64	@ 0x40
 80037e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037ec:	f107 0308 	add.w	r3, r7, #8
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fe6f 	bl	80034d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 80037f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fc:	2106      	movs	r1, #6
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f828 	bl	8003854 <SDMMC_GetCmdResp1>
 8003804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003806:	69fb      	ldr	r3, [r7, #28]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <SDMMC_CmdSendEXTCSD>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800381e:	2308      	movs	r3, #8
 8003820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003822:	2340      	movs	r3, #64	@ 0x40
 8003824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800382a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800382e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003830:	f107 0308 	add.w	r3, r7, #8
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff fe4d 	bl	80034d6 <SDIO_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SEND_EXT_CSD,SDIO_CMDTIMEOUT);
 800383c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003840:	2108      	movs	r1, #8
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f806 	bl	8003854 <SDMMC_GetCmdResp1>
 8003848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800384a:	69fb      	ldr	r3, [r7, #28]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	460b      	mov	r3, r1
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003862:	4b70      	ldr	r3, [pc, #448]	@ (8003a24 <SDMMC_GetCmdResp1+0x1d0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a70      	ldr	r2, [pc, #448]	@ (8003a28 <SDMMC_GetCmdResp1+0x1d4>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	0a5a      	lsrs	r2, r3, #9
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	61fa      	str	r2, [r7, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003880:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003884:	e0c9      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ef      	beq.n	8003876 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ea      	bne.n	8003876 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2204      	movs	r2, #4
 80038b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80038b2:	2304      	movs	r3, #4
 80038b4:	e0b1      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0a6      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	22c5      	movs	r2, #197	@ 0xc5
 80038d0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7ff fe29 	bl	800352a <SDIO_GetCommandResponse>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	7afb      	ldrb	r3, [r7, #11]
 80038de:	4293      	cmp	r3, r2
 80038e0:	d001      	beq.n	80038e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e099      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80038e6:	2100      	movs	r1, #0
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f7ff fe2b 	bl	8003544 <SDIO_GetResponse>
 80038ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4b4e      	ldr	r3, [pc, #312]	@ (8003a2c <SDMMC_GetCmdResp1+0x1d8>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e08d      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	da02      	bge.n	800390a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003904:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003908:	e087      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003914:	2340      	movs	r3, #64	@ 0x40
 8003916:	e080      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003922:	2380      	movs	r3, #128	@ 0x80
 8003924:	e079      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003930:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003934:	e071      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003940:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003944:	e069      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003954:	e061      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003960:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003964:	e059      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003974:	e051      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003980:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003984:	e049      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003990:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003994:	e041      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80039a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039a4:	e039      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80039b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039b4:	e031      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80039c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80039c4:	e029      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80039d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80039d4:	e021      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80039e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039e4:	e019      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80039f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80039f4:	e011      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003a00:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a04:	e009      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003a10:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003a14:	e001      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003a16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000
 8003a28:	10624dd3 	.word	0x10624dd3
 8003a2c:	fdffe008 	.word	0xfdffe008

08003a30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a38:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab8 <SDMMC_GetCmdResp2+0x88>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003abc <SDMMC_GetCmdResp2+0x8c>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	0a5b      	lsrs	r3, r3, #9
 8003a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	60fa      	str	r2, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003a58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003a5c:	e026      	b.n	8003aac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0ef      	beq.n	8003a4e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ea      	bne.n	8003a4e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2204      	movs	r2, #4
 8003a88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	e00e      	b.n	8003aac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e003      	b.n	8003aac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	22c5      	movs	r2, #197	@ 0xc5
 8003aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	10624dd3 	.word	0x10624dd3

08003ac0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b34 <SDMMC_GetCmdResp3+0x74>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1a      	ldr	r2, [pc, #104]	@ (8003b38 <SDMMC_GetCmdResp3+0x78>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0a5b      	lsrs	r3, r3, #9
 8003ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1e5a      	subs	r2, r3, #1
 8003ae2:	60fa      	str	r2, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ae8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003aec:	e01b      	b.n	8003b26 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ef      	beq.n	8003ade <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ea      	bne.n	8003ade <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2204      	movs	r2, #4
 8003b18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	e003      	b.n	8003b26 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	22c5      	movs	r2, #197	@ 0xc5
 8003b22:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000000 	.word	0x20000000
 8003b38:	10624dd3 	.word	0x10624dd3

08003b3c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b44:	4b11      	ldr	r3, [pc, #68]	@ (8003b8c <SDMMC_GetCmdError+0x50>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a11      	ldr	r2, [pc, #68]	@ (8003b90 <SDMMC_GetCmdError+0x54>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	0a5b      	lsrs	r3, r3, #9
 8003b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1e5a      	subs	r2, r3, #1
 8003b5e:	60fa      	str	r2, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b68:	e009      	b.n	8003b7e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f1      	beq.n	8003b5a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	22c5      	movs	r2, #197	@ 0xc5
 8003b7a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	10624dd3 	.word	0x10624dd3

08003b94 <memset>:
 8003b94:	4402      	add	r2, r0
 8003b96:	4603      	mov	r3, r0
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <memset+0xa>
 8003b9c:	4770      	bx	lr
 8003b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba2:	e7f9      	b.n	8003b98 <memset+0x4>

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8003bdc <__libc_init_array+0x38>)
 8003ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8003be0 <__libc_init_array+0x3c>)
 8003baa:	1b64      	subs	r4, r4, r5
 8003bac:	10a4      	asrs	r4, r4, #2
 8003bae:	2600      	movs	r6, #0
 8003bb0:	42a6      	cmp	r6, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8003be4 <__libc_init_array+0x40>)
 8003bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8003be8 <__libc_init_array+0x44>)
 8003bb8:	f000 f818 	bl	8003bec <_init>
 8003bbc:	1b64      	subs	r4, r4, r5
 8003bbe:	10a4      	asrs	r4, r4, #2
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bcc:	4798      	blx	r3
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd6:	4798      	blx	r3
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	08003c24 	.word	0x08003c24
 8003be0:	08003c24 	.word	0x08003c24
 8003be4:	08003c24 	.word	0x08003c24
 8003be8:	08003c28 	.word	0x08003c28

08003bec <_init>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr

08003bf8 <_fini>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr
